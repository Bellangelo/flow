#!/usr/bin/env php
<?php

use Flow\ETL\Async\ReactPHP\Worker\TCPClient;
use Flow\ETL\Async\Client\CLI;
use Flow\ETL\Async\Client\CLI\Input;
use Flow\Serializer\CompressingSerializer;
use Flow\Serializer\NativePHPSerializer;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Psr\Log\LogLevel;

(function (array $argv){
    \error_reporting(E_ALL);
    \ini_set('display_errors', 'stderr');

    $autoloadPathEnv = \getenv('FLOW_PHP_ASYNC_AUTOLOAD');

    if (\is_string($autoloadPathEnv) && \file_exists($autoloadPathEnv)) {
        require $autoloadPathEnv;
    } else {
        if (is_file($autoload = getcwd() . '/vendor/autoload.php')) {
            require $autoload;
        } elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {
            require $autoload;
        } elseif (is_file($autoload = __DIR__ . '/../vendor/autoload.php')) {
            require($autoload);
        } elseif (is_file($autoload = __DIR__ . '/../../../autoload.php')) {
            require($autoload);
        } else {
            \fwrite(STDERR,
                'You must set up the project dependencies, run the following commands:' . PHP_EOL .
                'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
                'php composer.phar install' . PHP_EOL
            );
            exit(1);
        }
    }

    $logger = new Logger('worker');
    $stdout = \fopen("php://stdout", "w+");
    $stderr = fopen('php://stderr', 'w+');
    $stdoutHandler = new StreamHandler($stdout, LogLevel::DEBUG);
    $stderrHandler = new StreamHandler($stderr, LogLevel::ERROR, false);

    $logger->pushHandler($stdoutHandler);
    $logger->pushHandler($stderrHandler);

    $serializer = new CompressingSerializer(new NativePHPSerializer());

    $cli = new CLI($logger, new TCPClient($logger, $serializer));

    exit($cli->run(new Input($argv)));
})($argv);