#!/usr/bin/env php
<?php

use Flow\ETL\Async\Amp\Worker\SocketClient;
use Flow\ETL\Async\Socket\Worker\SocketLocalWorkerCLI;
use Flow\ETL\CLI\Input;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Psr\Log\LogLevel;

\error_reporting(E_ALL);
\ini_set('display_errors', 'stderr');
$autoloadPathEnv = \getenv('FLOW_PHP_ASYNC_AUTOLOAD');

if (\is_string($autoloadPathEnv) && \file_exists($autoloadPathEnv)) {
    require $autoloadPathEnv;
} else {
    if (is_file($autoload = getcwd() . '/vendor/autoload.php')) {
        require $autoload;
    } elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {
        require $autoload;
    } elseif (is_file($autoload = __DIR__ . '/../vendor/autoload.php')) {
        require($autoload);
    } elseif (is_file($autoload = __DIR__ . '/../../../autoload.php')) {
        require($autoload);
    } else {
        \fwrite(STDERR,
            'You must set up the project dependencies, run the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }
}

$logger = new Logger('worker');
$stderrHandler = new StreamHandler("php://stderr", LogLevel::ERROR, false);
$stdoutHandler = new StreamHandler("php://stdout", LogLevel::DEBUG, false);

$output = "[worker.%level_name%]: %datetime%: %message% %context% %extra%\n";
$formatter = new LineFormatter($output);

$stdoutHandler->setFormatter($formatter);
$stderrHandler->setFormatter($formatter);

$logger->pushHandler($stderrHandler);
$logger->pushHandler($stdoutHandler);

exit((new SocketLocalWorkerCLI($logger, new SocketClient($logger)))->run(new Input($argv)));