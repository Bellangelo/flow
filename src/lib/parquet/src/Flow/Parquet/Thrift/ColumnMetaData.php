<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.18.1).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Exception\{TProtocolException};
use Thrift\Type\{TType};

/**
 * Description for column metadata.
 */
class ColumnMetaData
{
    public static $_TSPEC = [
        1 => [
            'var' => 'type',
            'isRequired' => true,
            'type' => TType::I32,
            'class' => '\Flow\Parquet\Thrift\Type',
        ],
        2 => [
            'var' => 'encodings',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => [
                'type' => TType::I32,
                'class' => '\Flow\Parquet\Thrift\Encoding',
            ],
        ],
        3 => [
            'var' => 'path_in_schema',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => [
                'type' => TType::STRING,
            ],
        ],
        4 => [
            'var' => 'codec',
            'isRequired' => true,
            'type' => TType::I32,
            'class' => '\Flow\Parquet\Thrift\CompressionCodec',
        ],
        5 => [
            'var' => 'num_values',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        6 => [
            'var' => 'total_uncompressed_size',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        7 => [
            'var' => 'total_compressed_size',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        8 => [
            'var' => 'key_value_metadata',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\KeyValue',
            ],
        ],
        9 => [
            'var' => 'data_page_offset',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        10 => [
            'var' => 'index_page_offset',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        11 => [
            'var' => 'dictionary_page_offset',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        12 => [
            'var' => 'statistics',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\Statistics',
        ],
        13 => [
            'var' => 'encoding_stats',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\PageEncodingStats',
            ],
        ],
        14 => [
            'var' => 'bloom_filter_offset',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        15 => [
            'var' => 'bloom_filter_length',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        16 => [
            'var' => 'size_statistics',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\SizeStatistics',
        ],
    ];

    public static $isValidate = false;

    /**
     * Size of Bloom filter data including the serialized header, in bytes.
     * Added in 2.10 so readers may not read this field from old files and
     * it can be obtained after the BloomFilterHeader has been deserialized.
     * Writers should write this field so readers can read the bloom filter
     * in a single I/O.
     *
     * @var int
     */
    public $bloom_filter_length;

    /**
     * Byte offset from beginning of file to Bloom filter data. *.
     *
     * @var int
     */
    public $bloom_filter_offset;

    /**
     * Compression codec *.
     *
     * @var int
     */
    public $codec;

    /**
     * Byte offset from beginning of file to first data page *.
     *
     * @var int
     */
    public $data_page_offset;

    /**
     * Byte offset from the beginning of file to first (only) dictionary page *.
     *
     * @var int
     */
    public $dictionary_page_offset;

    /**
     * Set of all encodings used for pages in this column chunk.
     * This information can be used to determine if all data pages are
     * dictionary encoded for example *.
     *
     * @var \Flow\Parquet\Thrift\PageEncodingStats[]
     */
    public $encoding_stats;

    /**
     * Set of all encodings used for this column. The purpose is to validate
     * whether we can decode those pages. *.
     *
     * @var int[]
     */
    public $encodings;

    /**
     * Byte offset from beginning of file to root index page *.
     *
     * @var int
     */
    public $index_page_offset;

    /**
     * Optional key/value metadata *.
     *
     * @var \Flow\Parquet\Thrift\KeyValue[]
     */
    public $key_value_metadata;

    /**
     * Number of values in this column *.
     *
     * @var int
     */
    public $num_values;

    /**
     * Path in schema *.
     *
     * @var string[]
     */
    public $path_in_schema;

    /**
     * Optional statistics to help estimate total memory when converted to in-memory
     * representations. The histograms contained in these statistics can
     * also be useful in some cases for more fine-grained nullability/list length
     * filter pushdown.
     *
     * @var SizeStatistics
     */
    public $size_statistics;

    /**
     * optional statistics for this column chunk.
     *
     * @var Statistics
     */
    public $statistics;

    /**
     * total byte size of all compressed, and potentially encrypted, pages
     * in this column chunk (including the headers) *.
     *
     * @var int
     */
    public $total_compressed_size;

    /**
     * total byte size of all uncompressed pages in this column chunk (including the headers) *.
     *
     * @var int
     */
    public $total_uncompressed_size;

    /**
     * Type of this column *.
     *
     * @var int
     */
    public $type;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }

            if (isset($vals['encodings'])) {
                $this->encodings = $vals['encodings'];
            }

            if (isset($vals['path_in_schema'])) {
                $this->path_in_schema = $vals['path_in_schema'];
            }

            if (isset($vals['codec'])) {
                $this->codec = $vals['codec'];
            }

            if (isset($vals['num_values'])) {
                $this->num_values = $vals['num_values'];
            }

            if (isset($vals['total_uncompressed_size'])) {
                $this->total_uncompressed_size = $vals['total_uncompressed_size'];
            }

            if (isset($vals['total_compressed_size'])) {
                $this->total_compressed_size = $vals['total_compressed_size'];
            }

            if (isset($vals['key_value_metadata'])) {
                $this->key_value_metadata = $vals['key_value_metadata'];
            }

            if (isset($vals['data_page_offset'])) {
                $this->data_page_offset = $vals['data_page_offset'];
            }

            if (isset($vals['index_page_offset'])) {
                $this->index_page_offset = $vals['index_page_offset'];
            }

            if (isset($vals['dictionary_page_offset'])) {
                $this->dictionary_page_offset = $vals['dictionary_page_offset'];
            }

            if (isset($vals['statistics'])) {
                $this->statistics = $vals['statistics'];
            }

            if (isset($vals['encoding_stats'])) {
                $this->encoding_stats = $vals['encoding_stats'];
            }

            if (isset($vals['bloom_filter_offset'])) {
                $this->bloom_filter_offset = $vals['bloom_filter_offset'];
            }

            if (isset($vals['bloom_filter_length'])) {
                $this->bloom_filter_length = $vals['bloom_filter_length'];
            }

            if (isset($vals['size_statistics'])) {
                $this->size_statistics = $vals['size_statistics'];
            }
        }
    }

    public function getName()
    {
        return 'ColumnMetaData';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);

        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);

            if ($ftype == TType::STOP) {
                break;
            }

            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->encodings = [];
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readListBegin($_etype17, $_size14);

                        for ($_i18 = 0; $_i18 < $_size14; $_i18++) {
                            $elem19 = null;
                            $xfer += $input->readI32($elem19);
                            $this->encodings[] = $elem19;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->path_in_schema = [];
                        $_size20 = 0;
                        $_etype23 = 0;
                        $xfer += $input->readListBegin($_etype23, $_size20);

                        for ($_i24 = 0; $_i24 < $_size20; $_i24++) {
                            $elem25 = null;
                            $xfer += $input->readString($elem25);
                            $this->path_in_schema[] = $elem25;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->codec);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->num_values);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->total_uncompressed_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->total_compressed_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->key_value_metadata = [];
                        $_size26 = 0;
                        $_etype29 = 0;
                        $xfer += $input->readListBegin($_etype29, $_size26);

                        for ($_i30 = 0; $_i30 < $_size26; $_i30++) {
                            $elem31 = null;
                            $elem31 = new KeyValue();
                            $xfer += $elem31->read($input);
                            $this->key_value_metadata[] = $elem31;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 9:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->data_page_offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->index_page_offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->dictionary_page_offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->statistics = new Statistics();
                        $xfer += $this->statistics->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->encoding_stats = [];
                        $_size32 = 0;
                        $_etype35 = 0;
                        $xfer += $input->readListBegin($_etype35, $_size32);

                        for ($_i36 = 0; $_i36 < $_size32; $_i36++) {
                            $elem37 = null;
                            $elem37 = new PageEncodingStats();
                            $xfer += $elem37->read($input);
                            $this->encoding_stats[] = $elem37;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->bloom_filter_offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->bloom_filter_length);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 16:
                    if ($ftype == TType::STRUCT) {
                        $this->size_statistics = new SizeStatistics();
                        $xfer += $this->size_statistics->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;

                default:
                    $xfer += $input->skip($ftype);

                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ColumnMetaData');

        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->encodings !== null) {
            if (!is_array($this->encodings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('encodings', TType::LST, 2);
            $output->writeListBegin(TType::I32, count($this->encodings));

            foreach ($this->encodings as $iter38) {
                $xfer += $output->writeI32($iter38);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->path_in_schema !== null) {
            if (!is_array($this->path_in_schema)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('path_in_schema', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->path_in_schema));

            foreach ($this->path_in_schema as $iter39) {
                $xfer += $output->writeString($iter39);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->codec !== null) {
            $xfer += $output->writeFieldBegin('codec', TType::I32, 4);
            $xfer += $output->writeI32($this->codec);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->num_values !== null) {
            $xfer += $output->writeFieldBegin('num_values', TType::I64, 5);
            $xfer += $output->writeI64($this->num_values);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->total_uncompressed_size !== null) {
            $xfer += $output->writeFieldBegin('total_uncompressed_size', TType::I64, 6);
            $xfer += $output->writeI64($this->total_uncompressed_size);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->total_compressed_size !== null) {
            $xfer += $output->writeFieldBegin('total_compressed_size', TType::I64, 7);
            $xfer += $output->writeI64($this->total_compressed_size);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->key_value_metadata !== null) {
            if (!is_array($this->key_value_metadata)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('key_value_metadata', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->key_value_metadata));

            foreach ($this->key_value_metadata as $iter40) {
                $xfer += $iter40->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->data_page_offset !== null) {
            $xfer += $output->writeFieldBegin('data_page_offset', TType::I64, 9);
            $xfer += $output->writeI64($this->data_page_offset);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->index_page_offset !== null) {
            $xfer += $output->writeFieldBegin('index_page_offset', TType::I64, 10);
            $xfer += $output->writeI64($this->index_page_offset);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->dictionary_page_offset !== null) {
            $xfer += $output->writeFieldBegin('dictionary_page_offset', TType::I64, 11);
            $xfer += $output->writeI64($this->dictionary_page_offset);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->statistics !== null) {
            if (!is_object($this->statistics)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('statistics', TType::STRUCT, 12);
            $xfer += $this->statistics->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->encoding_stats !== null) {
            if (!is_array($this->encoding_stats)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('encoding_stats', TType::LST, 13);
            $output->writeListBegin(TType::STRUCT, count($this->encoding_stats));

            foreach ($this->encoding_stats as $iter41) {
                $xfer += $iter41->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->bloom_filter_offset !== null) {
            $xfer += $output->writeFieldBegin('bloom_filter_offset', TType::I64, 14);
            $xfer += $output->writeI64($this->bloom_filter_offset);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->bloom_filter_length !== null) {
            $xfer += $output->writeFieldBegin('bloom_filter_length', TType::I32, 15);
            $xfer += $output->writeI32($this->bloom_filter_length);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->size_statistics !== null) {
            if (!is_object($this->size_statistics)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('size_statistics', TType::STRUCT, 16);
            $xfer += $this->size_statistics->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
