<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.18.1).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Exception\{TProtocolException};
use Thrift\Type\{TType};

/**
 * LogicalType annotations to replace ConvertedType.
 *
 * To maintain compatibility, implementations using LogicalType for a
 * SchemaElement must also set the corresponding ConvertedType (if any)
 * from the following table.
 */
class LogicalType
{
    public static $_TSPEC = [
        1 => [
            'var' => 'STRING',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\StringType',
        ],
        2 => [
            'var' => 'MAP',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\MapType',
        ],
        3 => [
            'var' => 'LIST',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\ListType',
        ],
        4 => [
            'var' => 'ENUM',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\EnumType',
        ],
        5 => [
            'var' => 'DECIMAL',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\DecimalType',
        ],
        6 => [
            'var' => 'DATE',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\DateType',
        ],
        7 => [
            'var' => 'TIME',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\TimeType',
        ],
        8 => [
            'var' => 'TIMESTAMP',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\TimestampType',
        ],
        10 => [
            'var' => 'INTEGER',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\IntType',
        ],
        11 => [
            'var' => 'UNKNOWN',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\NullType',
        ],
        12 => [
            'var' => 'JSON',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\JsonType',
        ],
        13 => [
            'var' => 'BSON',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\BsonType',
        ],
        14 => [
            'var' => 'UUID',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\UUIDType',
        ],
        15 => [
            'var' => 'FLOAT16',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\Float16Type',
        ],
    ];

    public static $isValidate = false;

    /**
     * @var BsonType
     */
    public $BSON;

    /**
     * @var DateType
     */
    public $DATE;

    /**
     * @var DecimalType
     */
    public $DECIMAL;

    /**
     * @var EnumType
     */
    public $ENUM;

    /**
     * @var Float16Type
     */
    public $FLOAT16;

    /**
     * @var IntType
     */
    public $INTEGER;

    /**
     * @var JsonType
     */
    public $JSON;

    /**
     * @var ListType
     */
    public $LIST;

    /**
     * @var MapType
     */
    public $MAP;

    /**
     * @var StringType
     */
    public $STRING;

    /**
     * @var TimeType
     */
    public $TIME;

    /**
     * @var TimestampType
     */
    public $TIMESTAMP;

    /**
     * @var NullType
     */
    public $UNKNOWN;

    /**
     * @var UUIDType
     */
    public $UUID;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['STRING'])) {
                $this->STRING = $vals['STRING'];
            }

            if (isset($vals['MAP'])) {
                $this->MAP = $vals['MAP'];
            }

            if (isset($vals['LIST'])) {
                $this->LIST = $vals['LIST'];
            }

            if (isset($vals['ENUM'])) {
                $this->ENUM = $vals['ENUM'];
            }

            if (isset($vals['DECIMAL'])) {
                $this->DECIMAL = $vals['DECIMAL'];
            }

            if (isset($vals['DATE'])) {
                $this->DATE = $vals['DATE'];
            }

            if (isset($vals['TIME'])) {
                $this->TIME = $vals['TIME'];
            }

            if (isset($vals['TIMESTAMP'])) {
                $this->TIMESTAMP = $vals['TIMESTAMP'];
            }

            if (isset($vals['INTEGER'])) {
                $this->INTEGER = $vals['INTEGER'];
            }

            if (isset($vals['UNKNOWN'])) {
                $this->UNKNOWN = $vals['UNKNOWN'];
            }

            if (isset($vals['JSON'])) {
                $this->JSON = $vals['JSON'];
            }

            if (isset($vals['BSON'])) {
                $this->BSON = $vals['BSON'];
            }

            if (isset($vals['UUID'])) {
                $this->UUID = $vals['UUID'];
            }

            if (isset($vals['FLOAT16'])) {
                $this->FLOAT16 = $vals['FLOAT16'];
            }
        }
    }

    public function getName()
    {
        return 'LogicalType';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);

        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);

            if ($ftype == TType::STOP) {
                break;
            }

            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->STRING = new StringType();
                        $xfer += $this->STRING->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->MAP = new MapType();
                        $xfer += $this->MAP->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->LIST = new ListType();
                        $xfer += $this->LIST->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->ENUM = new EnumType();
                        $xfer += $this->ENUM->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->DECIMAL = new DecimalType();
                        $xfer += $this->DECIMAL->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->DATE = new DateType();
                        $xfer += $this->DATE->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->TIME = new TimeType();
                        $xfer += $this->TIME->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->TIMESTAMP = new TimestampType();
                        $xfer += $this->TIMESTAMP->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->INTEGER = new IntType();
                        $xfer += $this->INTEGER->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->UNKNOWN = new NullType();
                        $xfer += $this->UNKNOWN->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->JSON = new JsonType();
                        $xfer += $this->JSON->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->BSON = new BsonType();
                        $xfer += $this->BSON->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 14:
                    if ($ftype == TType::STRUCT) {
                        $this->UUID = new UUIDType();
                        $xfer += $this->UUID->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->FLOAT16 = new Float16Type();
                        $xfer += $this->FLOAT16->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;

                default:
                    $xfer += $input->skip($ftype);

                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('LogicalType');

        if ($this->STRING !== null) {
            if (!is_object($this->STRING)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('STRING', TType::STRUCT, 1);
            $xfer += $this->STRING->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->MAP !== null) {
            if (!is_object($this->MAP)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('MAP', TType::STRUCT, 2);
            $xfer += $this->MAP->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->LIST !== null) {
            if (!is_object($this->LIST)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('LIST', TType::STRUCT, 3);
            $xfer += $this->LIST->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->ENUM !== null) {
            if (!is_object($this->ENUM)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ENUM', TType::STRUCT, 4);
            $xfer += $this->ENUM->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->DECIMAL !== null) {
            if (!is_object($this->DECIMAL)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('DECIMAL', TType::STRUCT, 5);
            $xfer += $this->DECIMAL->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->DATE !== null) {
            if (!is_object($this->DATE)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('DATE', TType::STRUCT, 6);
            $xfer += $this->DATE->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->TIME !== null) {
            if (!is_object($this->TIME)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('TIME', TType::STRUCT, 7);
            $xfer += $this->TIME->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->TIMESTAMP !== null) {
            if (!is_object($this->TIMESTAMP)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('TIMESTAMP', TType::STRUCT, 8);
            $xfer += $this->TIMESTAMP->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->INTEGER !== null) {
            if (!is_object($this->INTEGER)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('INTEGER', TType::STRUCT, 10);
            $xfer += $this->INTEGER->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->UNKNOWN !== null) {
            if (!is_object($this->UNKNOWN)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UNKNOWN', TType::STRUCT, 11);
            $xfer += $this->UNKNOWN->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->JSON !== null) {
            if (!is_object($this->JSON)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('JSON', TType::STRUCT, 12);
            $xfer += $this->JSON->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->BSON !== null) {
            if (!is_object($this->BSON)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('BSON', TType::STRUCT, 13);
            $xfer += $this->BSON->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->UUID !== null) {
            if (!is_object($this->UUID)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UUID', TType::STRUCT, 14);
            $xfer += $this->UUID->write($output);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->FLOAT16 !== null) {
            if (!is_object($this->FLOAT16)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('FLOAT16', TType::STRUCT, 15);
            $xfer += $this->FLOAT16->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
