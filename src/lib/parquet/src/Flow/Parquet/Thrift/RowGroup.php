<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.18.1).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Exception\{TProtocolException};
use Thrift\Type\{TType};

class RowGroup
{
    public static $_TSPEC = [
        1 => [
            'var' => 'columns',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\ColumnChunk',
            ],
        ],
        2 => [
            'var' => 'total_byte_size',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        3 => [
            'var' => 'num_rows',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        4 => [
            'var' => 'sorting_columns',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\SortingColumn',
            ],
        ],
        5 => [
            'var' => 'file_offset',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        6 => [
            'var' => 'total_compressed_size',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        7 => [
            'var' => 'ordinal',
            'isRequired' => false,
            'type' => TType::I16,
        ],
    ];

    public static $isValidate = false;

    /**
     * Metadata for each column chunk in this row group.
     * This list must have the same order as the SchemaElement list in FileMetaData.
     *
     * @var array<ColumnChunk>
     */
    public $columns;

    /**
     * Byte offset from beginning of file to first page (data or dictionary)
     * in this row group *.
     *
     * @var int
     */
    public $file_offset;

    /**
     * Number of rows in this row group *.
     *
     * @var int
     */
    public $num_rows;

    /**
     * Row group ordinal in the file *.
     *
     * @var int
     */
    public $ordinal;

    /**
     * If set, specifies a sort ordering of the rows in this RowGroup.
     * The sorting columns can be a subset of all the columns.
     *
     * @var array<SortingColumn>
     */
    public $sorting_columns;

    /**
     * Total byte size of all the uncompressed column data in this row group *.
     *
     * @var int
     */
    public $total_byte_size;

    /**
     * Total byte size of all compressed (and potentially encrypted) column data
     * in this row group *.
     *
     * @var int
     */
    public $total_compressed_size;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }

            if (isset($vals['total_byte_size'])) {
                $this->total_byte_size = $vals['total_byte_size'];
            }

            if (isset($vals['num_rows'])) {
                $this->num_rows = $vals['num_rows'];
            }

            if (isset($vals['sorting_columns'])) {
                $this->sorting_columns = $vals['sorting_columns'];
            }

            if (isset($vals['file_offset'])) {
                $this->file_offset = $vals['file_offset'];
            }

            if (isset($vals['total_compressed_size'])) {
                $this->total_compressed_size = $vals['total_compressed_size'];
            }

            if (isset($vals['ordinal'])) {
                $this->ordinal = $vals['ordinal'];
            }
        }
    }

    public function getName()
    {
        return 'RowGroup';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);

        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);

            if ($ftype == TType::STOP) {
                break;
            }

            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->columns = [];
                        $_size49 = 0;
                        $_etype52 = 0;
                        $xfer += $input->readListBegin($_etype52, $_size49);

                        for ($_i53 = 0; $_i53 < $_size49; $_i53++) {
                            $elem54 = null;
                            $elem54 = new ColumnChunk();
                            $xfer += $elem54->read($input);
                            $this->columns[] = $elem54;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->total_byte_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->num_rows);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->sorting_columns = [];
                        $_size55 = 0;
                        $_etype58 = 0;
                        $xfer += $input->readListBegin($_etype58, $_size55);

                        for ($_i59 = 0; $_i59 < $_size55; $_i59++) {
                            $elem60 = null;
                            $elem60 = new SortingColumn();
                            $xfer += $elem60->read($input);
                            $this->sorting_columns[] = $elem60;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->file_offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->total_compressed_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 7:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->ordinal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;

                default:
                    $xfer += $input->skip($ftype);

                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RowGroup');

        if ($this->columns !== null) {
            if (!is_array($this->columns)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('columns', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->columns));

            foreach ($this->columns as $iter61) {
                $xfer += $iter61->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->total_byte_size !== null) {
            $xfer += $output->writeFieldBegin('total_byte_size', TType::I64, 2);
            $xfer += $output->writeI64($this->total_byte_size);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->num_rows !== null) {
            $xfer += $output->writeFieldBegin('num_rows', TType::I64, 3);
            $xfer += $output->writeI64($this->num_rows);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->sorting_columns !== null) {
            if (!is_array($this->sorting_columns)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sorting_columns', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->sorting_columns));

            foreach ($this->sorting_columns as $iter62) {
                $xfer += $iter62->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->file_offset !== null) {
            $xfer += $output->writeFieldBegin('file_offset', TType::I64, 5);
            $xfer += $output->writeI64($this->file_offset);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->total_compressed_size !== null) {
            $xfer += $output->writeFieldBegin('total_compressed_size', TType::I64, 6);
            $xfer += $output->writeI64($this->total_compressed_size);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->ordinal !== null) {
            $xfer += $output->writeFieldBegin('ordinal', TType::I16, 7);
            $xfer += $output->writeI16($this->ordinal);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
