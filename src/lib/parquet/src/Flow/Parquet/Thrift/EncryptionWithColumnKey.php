<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.18.1).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Exception\{TProtocolException};
use Thrift\Type\{TType};

class EncryptionWithColumnKey
{
    public static $_TSPEC = [
        1 => [
            'var' => 'path_in_schema',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => [
                'type' => TType::STRING,
            ],
        ],
        2 => [
            'var' => 'key_metadata',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
    ];

    public static $isValidate = false;

    /**
     * Retrieval metadata of column encryption key *.
     *
     * @var string
     */
    public $key_metadata;

    /**
     * Column path in schema *.
     *
     * @var string[]
     */
    public $path_in_schema;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['path_in_schema'])) {
                $this->path_in_schema = $vals['path_in_schema'];
            }

            if (isset($vals['key_metadata'])) {
                $this->key_metadata = $vals['key_metadata'];
            }
        }
    }

    public function getName()
    {
        return 'EncryptionWithColumnKey';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);

        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);

            if ($ftype == TType::STOP) {
                break;
            }

            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->path_in_schema = [];
                        $_size42 = 0;
                        $_etype45 = 0;
                        $xfer += $input->readListBegin($_etype45, $_size42);

                        for ($_i46 = 0; $_i46 < $_size42; $_i46++) {
                            $elem47 = null;
                            $xfer += $input->readString($elem47);
                            $this->path_in_schema[] = $elem47;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->key_metadata);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;

                default:
                    $xfer += $input->skip($ftype);

                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('EncryptionWithColumnKey');

        if ($this->path_in_schema !== null) {
            if (!is_array($this->path_in_schema)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('path_in_schema', TType::LST, 1);
            $output->writeListBegin(TType::STRING, count($this->path_in_schema));

            foreach ($this->path_in_schema as $iter48) {
                $xfer += $output->writeString($iter48);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->key_metadata !== null) {
            $xfer += $output->writeFieldBegin('key_metadata', TType::STRING, 2);
            $xfer += $output->writeString($this->key_metadata);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
