<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.18.1).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Exception\{TProtocolException};
use Thrift\Type\{TType};

/**
 * Optional offsets for each data page in a ColumnChunk.
 *
 * Forms part of the page index, along with ColumnIndex.
 *
 * OffsetIndex may be present even if ColumnIndex is not.
 */
class OffsetIndex
{
    public static $_TSPEC = [
        1 => [
            'var' => 'page_locations',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\PageLocation',
            ],
        ],
        2 => [
            'var' => 'unencoded_byte_array_data_bytes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => [
                'type' => TType::I64,
            ],
        ],
    ];

    public static $isValidate = false;

    /**
     * PageLocations, ordered by increasing PageLocation.offset. It is required
     * that page_locations[i].first_row_index < page_locations[i+1].first_row_index.
     *
     * @var array<PageLocation>
     */
    public $page_locations;

    /**
     * Unencoded/uncompressed size for BYTE_ARRAY types.
     *
     * See documention for unencoded_byte_array_data_bytes in SizeStatistics for
     * more details on this field.
     *
     * @var array<int>
     */
    public $unencoded_byte_array_data_bytes;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['page_locations'])) {
                $this->page_locations = $vals['page_locations'];
            }

            if (isset($vals['unencoded_byte_array_data_bytes'])) {
                $this->unencoded_byte_array_data_bytes = $vals['unencoded_byte_array_data_bytes'];
            }
        }
    }

    public function getName()
    {
        return 'OffsetIndex';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);

        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);

            if ($ftype == TType::STOP) {
                break;
            }

            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->page_locations = [];
                        $_size63 = 0;
                        $_etype66 = 0;
                        $xfer += $input->readListBegin($_etype66, $_size63);

                        for ($_i67 = 0; $_i67 < $_size63; $_i67++) {
                            $elem68 = null;
                            $elem68 = new PageLocation();
                            $xfer += $elem68->read($input);
                            $this->page_locations[] = $elem68;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->unencoded_byte_array_data_bytes = [];
                        $_size69 = 0;
                        $_etype72 = 0;
                        $xfer += $input->readListBegin($_etype72, $_size69);

                        for ($_i73 = 0; $_i73 < $_size69; $_i73++) {
                            $elem74 = null;
                            $xfer += $input->readI64($elem74);
                            $this->unencoded_byte_array_data_bytes[] = $elem74;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;

                default:
                    $xfer += $input->skip($ftype);

                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('OffsetIndex');

        if ($this->page_locations !== null) {
            if (!is_array($this->page_locations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('page_locations', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->page_locations));

            foreach ($this->page_locations as $iter75) {
                $xfer += $iter75->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }

        if ($this->unencoded_byte_array_data_bytes !== null) {
            if (!is_array($this->unencoded_byte_array_data_bytes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('unencoded_byte_array_data_bytes', TType::LST, 2);
            $output->writeListBegin(TType::I64, count($this->unencoded_byte_array_data_bytes));

            foreach ($this->unencoded_byte_array_data_bytes as $iter76) {
                $xfer += $output->writeI64($iter76);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
