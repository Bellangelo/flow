<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.18.1).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Type\{TType};

/**
 * Statistics per row group and per page
 * All fields are optional.
 */
class Statistics
{
    public static $_TSPEC = [
        1 => [
            'var' => 'max',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
        2 => [
            'var' => 'min',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
        3 => [
            'var' => 'null_count',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        4 => [
            'var' => 'distinct_count',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        5 => [
            'var' => 'max_value',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
        6 => [
            'var' => 'min_value',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
        7 => [
            'var' => 'is_max_value_exact',
            'isRequired' => false,
            'type' => TType::BOOL,
        ],
        8 => [
            'var' => 'is_min_value_exact',
            'isRequired' => false,
            'type' => TType::BOOL,
        ],
    ];

    public static $isValidate = false;

    /**
     * count of distinct values occurring.
     *
     * @var int
     */
    public $distinct_count;

    /**
     * If true, max_value is the actual maximum value for a column.
     *
     * @var bool
     */
    public $is_max_value_exact;

    /**
     * If true, min_value is the actual minimum value for a column.
     *
     * @var bool
     */
    public $is_min_value_exact;

    /**
     * DEPRECATED: min and max value of the column. Use min_value and max_value.
     *
     * Values are encoded using PLAIN encoding, except that variable-length byte
     * arrays do not include a length prefix.
     *
     * These fields encode min and max values determined by signed comparison
     * only. New files should use the correct order for a column's logical type
     * and store the values in the min_value and max_value fields.
     *
     * To support older readers, these may be set when the column order is
     * signed.
     *
     * @var string
     */
    public $max;

    /**
     * Lower and upper bound values for the column, determined by its ColumnOrder.
     *
     * These may be the actual minimum and maximum values found on a page or column
     * chunk, but can also be (more compact) values that do not exist on a page or
     * column chunk. For example, instead of storing "Blart Versenwald III", a writer
     * may set min_value="B", max_value="C". Such more compact values must still be
     * valid values within the column's logical type.
     *
     * Values are encoded using PLAIN encoding, except that variable-length byte
     * arrays do not include a length prefix.
     *
     * @var string
     */
    public $max_value;

    /**
     * @var string
     */
    public $min;

    /**
     * @var string
     */
    public $min_value;

    /**
     * Count of null values in the column.
     *
     * Writers SHOULD always write this field even if it is zero (i.e. no null value)
     * or the column is not nullable.
     * Readers MUST distinguish between null_count not being present and null_count == 0.
     * If null_count is not present, readers MUST NOT assume null_count == 0.
     *
     * @var int
     */
    public $null_count;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['max'])) {
                $this->max = $vals['max'];
            }

            if (isset($vals['min'])) {
                $this->min = $vals['min'];
            }

            if (isset($vals['null_count'])) {
                $this->null_count = $vals['null_count'];
            }

            if (isset($vals['distinct_count'])) {
                $this->distinct_count = $vals['distinct_count'];
            }

            if (isset($vals['max_value'])) {
                $this->max_value = $vals['max_value'];
            }

            if (isset($vals['min_value'])) {
                $this->min_value = $vals['min_value'];
            }

            if (isset($vals['is_max_value_exact'])) {
                $this->is_max_value_exact = $vals['is_max_value_exact'];
            }

            if (isset($vals['is_min_value_exact'])) {
                $this->is_min_value_exact = $vals['is_min_value_exact'];
            }
        }
    }

    public function getName()
    {
        return 'Statistics';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);

        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);

            if ($ftype == TType::STOP) {
                break;
            }

            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->max);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->min);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->null_count);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->distinct_count);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->max_value);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->min_value);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_max_value_exact);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_min_value_exact);
                    } else {
                        $xfer += $input->skip($ftype);
                    }

                    break;

                default:
                    $xfer += $input->skip($ftype);

                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Statistics');

        if ($this->max !== null) {
            $xfer += $output->writeFieldBegin('max', TType::STRING, 1);
            $xfer += $output->writeString($this->max);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->min !== null) {
            $xfer += $output->writeFieldBegin('min', TType::STRING, 2);
            $xfer += $output->writeString($this->min);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->null_count !== null) {
            $xfer += $output->writeFieldBegin('null_count', TType::I64, 3);
            $xfer += $output->writeI64($this->null_count);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->distinct_count !== null) {
            $xfer += $output->writeFieldBegin('distinct_count', TType::I64, 4);
            $xfer += $output->writeI64($this->distinct_count);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->max_value !== null) {
            $xfer += $output->writeFieldBegin('max_value', TType::STRING, 5);
            $xfer += $output->writeString($this->max_value);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->min_value !== null) {
            $xfer += $output->writeFieldBegin('min_value', TType::STRING, 6);
            $xfer += $output->writeString($this->min_value);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->is_max_value_exact !== null) {
            $xfer += $output->writeFieldBegin('is_max_value_exact', TType::BOOL, 7);
            $xfer += $output->writeBool($this->is_max_value_exact);
            $xfer += $output->writeFieldEnd();
        }

        if ($this->is_min_value_exact !== null) {
            $xfer += $output->writeFieldBegin('is_min_value_exact', TType::BOOL, 8);
            $xfer += $output->writeBool($this->is_min_value_exact);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
